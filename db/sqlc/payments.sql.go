// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: payments.sql

package db

import (
	"context"
)

const createpayment = `-- name: Createpayment :one
INSERT INTO payments(
    ticket_id,
    amount,
    credit_card_number
) VALUES (
    $1, $2, $3
) RETURNING ticket_id, amount, credit_card_number, created_at
`

type CreatepaymentParams struct {
	TicketID         int64 `json:"ticket_id"`
	Amount           int32 `json:"amount"`
	CreditCardNumber int32 `json:"credit_card_number"`
}

func (q *Queries) Createpayment(ctx context.Context, arg CreatepaymentParams) (Payment, error) {
	row := q.db.QueryRowContext(ctx, createpayment, arg.TicketID, arg.Amount, arg.CreditCardNumber)
	var i Payment
	err := row.Scan(
		&i.TicketID,
		&i.Amount,
		&i.CreditCardNumber,
		&i.CreatedAt,
	)
	return i, err
}

const getpayment = `-- name: Getpayment :one
SELECT ticket_id, amount, credit_card_number, created_at FROM payments
WHERE ticket_id = $1
LIMIT 1
`

func (q *Queries) Getpayment(ctx context.Context, ticketID int64) (Payment, error) {
	row := q.db.QueryRowContext(ctx, getpayment, ticketID)
	var i Payment
	err := row.Scan(
		&i.TicketID,
		&i.Amount,
		&i.CreditCardNumber,
		&i.CreatedAt,
	)
	return i, err
}

const listpayments = `-- name: Listpayments :many
SELECT ticket_id, amount, credit_card_number, created_at FROM payments
LIMIT $1
`

func (q *Queries) Listpayments(ctx context.Context, limit int32) ([]Payment, error) {
	rows, err := q.db.QueryContext(ctx, listpayments, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Payment
	for rows.Next() {
		var i Payment
		if err := rows.Scan(
			&i.TicketID,
			&i.Amount,
			&i.CreditCardNumber,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
