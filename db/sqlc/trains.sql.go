// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: trains.sql

package db

import (
	"context"
)

const createtrain = `-- name: Createtrain :one
INSERT INTO trains( 
    type, 
    class, 
    max_passenger_no,
    max_speed,
    route
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING train_number, type, class, max_passenger_no, max_speed, route
`

type CreatetrainParams struct {
	Type           string `json:"type"`
	Class          string `json:"class"`
	MaxPassengerNo int32  `json:"max_passenger_no"`
	MaxSpeed       int32  `json:"max_speed"`
	Route          string `json:"route"`
}

func (q *Queries) Createtrain(ctx context.Context, arg CreatetrainParams) (Train, error) {
	row := q.db.QueryRowContext(ctx, createtrain,
		arg.Type,
		arg.Class,
		arg.MaxPassengerNo,
		arg.MaxSpeed,
		arg.Route,
	)
	var i Train
	err := row.Scan(
		&i.TrainNumber,
		&i.Type,
		&i.Class,
		&i.MaxPassengerNo,
		&i.MaxSpeed,
		&i.Route,
	)
	return i, err
}

const deletetrain = `-- name: Deletetrain :exec
DELETE FROM trains
WHERE train_number = $1
`

func (q *Queries) Deletetrain(ctx context.Context, trainNumber int64) error {
	_, err := q.db.ExecContext(ctx, deletetrain, trainNumber)
	return err
}

const gettrain = `-- name: Gettrain :one
SELECT train_number, type, class, max_passenger_no, max_speed, route FROM trains
WHERE train_number = $1
LIMIT 1
`

func (q *Queries) Gettrain(ctx context.Context, trainNumber int64) (Train, error) {
	row := q.db.QueryRowContext(ctx, gettrain, trainNumber)
	var i Train
	err := row.Scan(
		&i.TrainNumber,
		&i.Type,
		&i.Class,
		&i.MaxPassengerNo,
		&i.MaxSpeed,
		&i.Route,
	)
	return i, err
}

const listtrains = `-- name: Listtrains :many
SELECT train_number, type, class, max_passenger_no, max_speed, route FROM trains
ORDER BY train_number
LIMIT $1
`

func (q *Queries) Listtrains(ctx context.Context, limit int32) ([]Train, error) {
	rows, err := q.db.QueryContext(ctx, listtrains, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Train
	for rows.Next() {
		var i Train
		if err := rows.Scan(
			&i.TrainNumber,
			&i.Type,
			&i.Class,
			&i.MaxPassengerNo,
			&i.MaxSpeed,
			&i.Route,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listtrainsbyroutes = `-- name: Listtrainsbyroutes :many
SELECT train_number, type, class, max_passenger_no, max_speed, route FROM trains
WHERE route = $1
ORDER BY train_number
LIMIT $2
`

type ListtrainsbyroutesParams struct {
	Route string `json:"route"`
	Limit int32  `json:"limit"`
}

func (q *Queries) Listtrainsbyroutes(ctx context.Context, arg ListtrainsbyroutesParams) ([]Train, error) {
	rows, err := q.db.QueryContext(ctx, listtrainsbyroutes, arg.Route, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Train
	for rows.Next() {
		var i Train
		if err := rows.Scan(
			&i.TrainNumber,
			&i.Type,
			&i.Class,
			&i.MaxPassengerNo,
			&i.MaxSpeed,
			&i.Route,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
