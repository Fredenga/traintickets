// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: tickets.sql

package db

import (
	"context"
	"time"
)

const createticket = `-- name: Createticket :one
INSERT INTO tickets(
    route,
    train_number,
    coach_number,
    seat_number,
    booking_date,
    trip_date,
    fare,
    email
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING ticket_id, route, train_number, coach_number, seat_number, booking_date, trip_date, fare, email
`

type CreateticketParams struct {
	Route       string    `json:"route"`
	TrainNumber int64     `json:"train_number"`
	CoachNumber int32     `json:"coach_number"`
	SeatNumber  int32     `json:"seat_number"`
	BookingDate time.Time `json:"booking_date"`
	TripDate    time.Time `json:"trip_date"`
	Fare        int32     `json:"fare"`
	Email       string    `json:"email"`
}

func (q *Queries) Createticket(ctx context.Context, arg CreateticketParams) (Ticket, error) {
	row := q.db.QueryRowContext(ctx, createticket,
		arg.Route,
		arg.TrainNumber,
		arg.CoachNumber,
		arg.SeatNumber,
		arg.BookingDate,
		arg.TripDate,
		arg.Fare,
		arg.Email,
	)
	var i Ticket
	err := row.Scan(
		&i.TicketID,
		&i.Route,
		&i.TrainNumber,
		&i.CoachNumber,
		&i.SeatNumber,
		&i.BookingDate,
		&i.TripDate,
		&i.Fare,
		&i.Email,
	)
	return i, err
}

const deleteticket = `-- name: Deleteticket :exec
DELETE FROM tickets
WHERE ticket_id = $1
`

func (q *Queries) Deleteticket(ctx context.Context, ticketID int64) error {
	_, err := q.db.ExecContext(ctx, deleteticket, ticketID)
	return err
}

const getticket = `-- name: Getticket :one
SELECT ticket_id, route, train_number, coach_number, seat_number, booking_date, trip_date, fare, email FROM tickets
WHERE ticket_id = $1
LIMIT 1
`

func (q *Queries) Getticket(ctx context.Context, ticketID int64) (Ticket, error) {
	row := q.db.QueryRowContext(ctx, getticket, ticketID)
	var i Ticket
	err := row.Scan(
		&i.TicketID,
		&i.Route,
		&i.TrainNumber,
		&i.CoachNumber,
		&i.SeatNumber,
		&i.BookingDate,
		&i.TripDate,
		&i.Fare,
		&i.Email,
	)
	return i, err
}

const listtickets = `-- name: Listtickets :many
SELECT ticket_id, route, train_number, coach_number, seat_number, booking_date, trip_date, fare, email FROM tickets
ORDER BY ticket_id
LIMIT $1
`

func (q *Queries) Listtickets(ctx context.Context, limit int32) ([]Ticket, error) {
	rows, err := q.db.QueryContext(ctx, listtickets, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Ticket
	for rows.Next() {
		var i Ticket
		if err := rows.Scan(
			&i.TicketID,
			&i.Route,
			&i.TrainNumber,
			&i.CoachNumber,
			&i.SeatNumber,
			&i.BookingDate,
			&i.TripDate,
			&i.Fare,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
